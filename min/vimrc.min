" Note: run PlugUpdate/Install first
set termguicolors

call plug#begin('~/.vim/plugged')
if has('nvim')
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-treesitter/nvim-treesitter'

Plug 'jose-elias-alvarez/null-ls.nvim'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-nvim-lsp'

Plug 'rafamadriz/friendly-snippets'
Plug 'hrsh7th/cmp-nvim-lua'
Plug 'L3MON4D3/LuaSnip'
Plug 'saadparwaiz1/cmp_luasnip'
Plug 'mfussenegger/nvim-jdtls'
Plug 'lukas-reineke/indent-blankline.nvim'
" Plug 'nvim-lua/popup.nvim'
" Plug 'nvim-lua/plenary.nvim'
" Plug 'nvim-telescope/telescope.nvim'

" Plug '~/github/lsp_signature.nvim'
Plug '~/github/guihua.lua'

Plug '~/github/navigator.lua'
" Plug '~/github/go.nvim'

" Plug 'ray-x/guihua.lua'
" Plug 'ray-x/navigator.lua'
endif

Plug 'liuchengxu/vim-clap' ", { 'do': { -> clap#installer#force_download() } }
Plug 'ray-x/aurora'

call plug#end()

set mouse=a

colorscheme aurora

if ! has('nvim')
  finish
endif

"--"vim.fn.expand('$HOME').. {cmd = {"/Users/ray.xu/bin/jdtls.sh"},

augroup lsp
    au!
    au FileType java lua require('jdtls').start_or_attach({settings = {java = {signatureHelp = { enabled = true }; contentProvider = { preferred = 'fernflower' };}}, on_init =  function(client) print('init ') if client.config.settings then client.notify('workspace/didChangeConfiguration', { settings = client.config.settings })end end})
augroup end

lua <<EOF
vim.lsp.set_log_level("debug")
log_path = vim.fn.expand("$HOME") .. "/tmp/neovim_debug.log"
require("indent_blankline").setup {
        enabled = true,
        char = "| ",
        show_trailing_blankline_indent = false,
        show_first_indent_level = false,
        char_list = {"", "┊", "┆", "¦", "|", "¦", "┆", "┊", ""},
        space_char_blankline = " ",
        use_treesitter = true,
        context_patterns = {
          "class", "return", "function", "method", "^if", "if", "^while", "jsx_element", "^for", "for",
          "^object", "^table", "block", "arguments", "if_statement", "else_clause", "jsx_element",
          "jsx_self_closing_element", "try_statement", "catch_clause", "import_statement",
          "operation_type"
        },
        show_current_context = true,
    }
lprint = function(...)
  local arg = {...}
  local str = "שׁ "
  local lineinfo = ''

  local info = debug.getinfo(2, "Sl")
  lineinfo = info.short_src .. ":" .. info.currentline
  str = str .. lineinfo

  for i, v in ipairs(arg) do
    if type(v) == "table" then
      str = str .. " |" .. tostring(i) .. ": " .. vim.inspect(v) .. "\n"
    else
      str = str .. " |" .. tostring(i) .. ": " .. tostring(v)
    end
  end
  if #str > 2 then
    if log_path ~= nil and #log_path > 3 then
      local f = io.open(log_path, "a+")
      io.output(f)
      io.write(str .. "\n")
      io.close(f)
    else
      print(str .. "\n")
    end
  end
end


  local efm_cfg = {
    flags = {debounce_text_changes = 2000},
    cmd = {'efm-langserver', '-loglevel', '1', '-logfile', vim.fn.expand("$HOME") .. '/tmp/efm.log'}, -- 1~10
    init_options = {documentFormatting = true, codeAction = false, document_formatting = true},
    root_dir = require'lspconfig'.util.root_pattern({'.git/', 'package.json', '.'}),
    on_attach = function(client)
      client.server_capabilities.document_formatting = true
      client.server_capabilities.goto_definition = false
      -- client.server_capabilities.code_action = nil
      local log = require("guihua.log").new({level = "info"}, true)
      vim.cmd([[autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting()]])
      -- print ("efm attached")
      -- set_lsp_config(client)
    end,
    filetypes = {
       'go', 'lua','sql',
    },

    settings = {
      rootMarkers = {".git/", 'package.json', 'Makefile', 'go.mod'},
      lintDebounce = "1s",
      formatDebounce = "1000ms",
      languages = {
        go = {
          {
            formatCommand = "golines --max-len=120  --base-formatter=gofumpt",
            formatStdin = true,
            lintCommand = "golangci-lint run",
            LintSeverity = 3
          }
        },
        lua = {
          {
            formatCommand = "lua-format --indent-width 2 --tab-width 2 --no-use-tab --column-limit 120 --column-table-limit 100 --no-keep-simple-function-one-line --no-chop-down-table --chop-down-kv-table --no-keep-simple-control-block-one-line --no-keep-simple-function-one-line --no-break-after-functioncall-lp --no-break-after-operator",
            formatStdin = true
          }
        },
      }
    }
  }

require'lspconfig'.efm.setup(efm_cfg)


-- local jdtlsstartup = vim.fn.expand('$HOME').."/bin/jdtls.sh"

require'nvim-treesitter.configs'.setup {
  highlight = {
  enable = true,
  additional_vim_regex_highlighting = false,
  },
}
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer





local ls = require "luasnip"
ls.config.set_config {history = true, updateevents = "TextChanged,TextChangedI"}
require("luasnip.loaders.from_vscode").lazy_load {}

vim.api.nvim_set_keymap("i", "<C-E>", "<Plug>luasnip-next-choice", {})
vim.api.nvim_set_keymap("s", "<C-E>", "<Plug>luasnip-next-choice", {})

local cmp = require('cmp')
cmp.setup {
    snippet = {
      expand = function(args)
        require'luasnip'.lsp_expand(args.body)
        -- require 'snippy'.expand_snippet(args.body)
        -- vim.fn["UltiSnips#Anon"](args.body)
      end
    },
    completion = {
      autocomplete = {require("cmp.types").cmp.TriggerEvent.TextChanged},
      completeopt = "menu,menuone,noselect"
    },
    sources = {{name = 'nvim_lsp'}, {name = 'buffer'}, {name = 'nvim_lua'}, {name='luasnip'}}
}


local sumneko_root_path = vim.fn.expand("$HOME") .. "/github/sumneko/lua-language-server"
local sumneko_binary = vim.fn.expand("$HOME")
                             .. "/github/sumneko/lua-language-server/bin/macOS/lua-language-server"

local single = {"╭", "─", "╮", "│", "╯", "─", "╰", "│"}
print("navigator setup")

require'navigator'.setup({
  debug = false, -- log output, set to true and log path: ~/.local/share/nvim/gh.log

  icons={code_action_icon = " "},

  width = 0.75, -- max width ratio (number of cols for the floating window) / (window width)
  height = 0.3, -- max list window height, 0.3 by default
  preview_height = 0.35, -- max height of preview windows
  border = 'none',
})


--
-- require('navigator').setup({
--   debug = true,
--   width = 0.7,
--   border = single, -- "single",
--   lsp = {
--
--     disable_lsp = {'pyright', 'jedi_language_server'},
--     sumneko_lua = {
--       sumneko_binary = sumneko_binary,
--       sumneko_root_path = sumneko_root_path,
--     },
--     efm=efm_cfg,
--   },
--   icons={code_action_icon = " "},
-- })



-- require'lsp_signature'.setup({toggle_key = nil,
--     floating_window = true,
--     -- floating_window_above_first = false,
--     log_path = vim.fn.expand("$HOME") .. "/tmp/sig.log",
--     debug = true,
--     hi_parameter = "Search",
--     bind = true,
--     extra_trigger_chars = { "(", "," },
--     handler_opts = {
--     border = "single", -- "shadow", --{"╭", "─" ,"╮", "│", "╯", "─", "╰", "│" },
-- }})

-- require'lspconfig'.gopls.setup({
--   flags = {
--       debounce_text_changes = 150,
--     }
-- })
--
-- require'lspconfig'.pyright.setup({})

EOF


""---------------------------Unused----------------------------------""


" local on_attach = function(client, bufnr)
"   local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
"   local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
"
"   -- Enable completion triggered by <c-x><c-o>
"   buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
"
"   -- Mappings.
"   local opts = { noremap=true, silent=true }
"   -- See `:help vim.lsp.*` for documentation on any of the below functions
"   buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
"   buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
"   buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
"   buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
"   buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
"   buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', " opts)
"   buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', " opts)
"   buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(" vim.lsp.buf.list_workspace_folders()))<CR>', opts)
"   buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
"   buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
"   buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
"   buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
"   buf_set_keymap('n', '<space>e', '<cmd>lua " vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
"   buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
"   buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
"   buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
"   buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
"
" end

" -- require 'go'.setup({dap_debug =true, verbose=true})
" -- require'lspconfig'.jedi_language_server.setup{}
" -- require'lsp_signature'.setup({log_path = vim.fn.expand("$HOME")  + "/tmp/sig.log",
" -- doc_lines=0,
" -- debug = true})
"
" -- require'lspconfig'.gopls.setup({
" --    on_attach = function()
" --    require'lsp_signature'.on_attach({bind = false, floating_window=false, hint_enable " = true})
" --    end
" -- })
"
"
" -- local sumneko_root_path = vim.fn.expand("$HOME")..'/github/sumneko/lua-language-server'
" -- local sumneko_binary = vim.fn.expand("$HOME")..'/github/sumneko/lua-language-server/" bin/-- macOS/lua-language-server'
" -- local single = {"╭", "─", "╮", "│", "╯", "─", "╰", "│"}
" -- print("navigator setup")
" -- require"navigator".setup({
" --   debug = true,
" --   width = 0.7,
" --   border = single, -- "single",
" -- })
" --

" nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
" nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
" nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
" nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
" nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
" nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
" nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
" nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
" nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
" nnoremap <buffer> <silent> <C-LeftMouse> <LeftMouse> <cmd>lua vim.lsp.buf.definition()<CR>
" nnoremap <buffer> <silent> g<LeftMouse> <LeftMouse> <cmd>lua vim.lsp.buf.implementation()<CR>





" colorscheme dracula
" let material_style = 'mariana'
" let material_style_fix = v:true
" colorscheme material
" call plug#begin('~/.vim/plugged')
"
" set noswapfile
"
" Plug 'neovim/nvim-lspconfig'
"



lua <<EOF




-- require'navigator'.setup({debug=true})
-- require'lspconfig'.gopls.setup({})
-- local util = require'lspconfig.util'
-- require'lspconfig'.gopls.setup{
-- 	on_attach = function(client, bufnr)
-- 		  print(debug.traceback())
--           --print(vim.inspect(client))
-- 	end,
-- 	root_dir = function(fname)
--       print(fname)
--       return util.root_pattern("go.mod", ".git")(fname) or util.path.dirname(fname)
--     end
-- }
-- require'lspconfig'.pyright.setup {}

-- require'navigator'.setup({  lsp = {
--     format_on_save = true, -- set to false to disasble lsp code mat on save (if you -- are using prettier/efm/formater etc)
--     tsserver = {
--       filetypes = {'typescript'} -- disable javascript etc,
--       -- set to {} to disable the lspclient for all filetype
--            }
--    }})
-- require "pears".setup()
-- require('nvim-autopairs').setup()


-- require('rust-tools').setup(opts)
-- require'navigator'.setup({
--   width = 0.8,
--   height = 0.4,
--   debug = true,
--   lsp = {
--     format_on_save = true, -- set to false to disasble lsp code mat on save (if you -- are using prettier/efm/formater etc)
--     tsserver = {
--       filetypes = {'typescript'} -- disable javascript etc,
--       -- set to {} to disable the lspclient for all filetype
--            }
--    }})
--
-- local util = require'lspconfig.util'

-- require'lsp_signature'.on_attach({bind = false, use_lspsaga=false, floating_window=false, hint_enable = true})


-- require('navigator').setup()



-- local lua_cfg = {
--   cmd = {sumneko_binary, "-E", sumneko_root_path .. "/main.lua"},
--   settings = {
--     Lua = {
--       runtime = {
--         -- Tell the language server which version of Lua you're -- using (most likely LuaJIT in the case of Neovim)
--         version = "LuaJIT",
--         -- Setup your lua path
--         path = vim.split(package.path, ";")
--       },
--       diagnostics = {
--         enable = true,
--         -- Get the language server to recognize the `vim` global
--         globals = {
--           "vim",
--           "describe",
--           "it",
--           "before_each",
--           "after_each",
--           "teardown",
--           "pending"
--         }
--       },
--       workspace = {
--         -- Make the server aware of Neovim runtime files
--         library = {
--           [vim.fn.expand("$VIMRUNTIME/lua")] = true,
--           [vim.fn.expand("$VIMRUNTIME/lua/vim")] = true,
--           [vim.fn.expand("$VIMRUNTIME/lua/vim/lsp")] = true
--           -- [vim.fn.expand("~/repos/nvim/lua")] = true
--         }
--       }
--     }
--   }
-- }
-- require'lspconfig'.sumneko_lua.setup (lua_cfg)

EOF



" Plug 'ray-x/guihua.lua', {'do': 'cd lua/fzy && make' }
" Plug 'ray-x/navigator.lua'
" Plug 'ray-x/lsp_signature.nvim'

" -- require('lsp_config')  -- you may need my lsp_config.lua
" require('lsp_signature').on_attach()

"
" local on_attach = function(client, bufnr)
"   require'lsp_signature'.on_attach()
"
"   if client.server_capabilities.document_formatting then
"     format.lsp_before_save()
"   end
"   vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
"
" end
"
" local sumneko_root_path = vim.fn.expand("$HOME")..'/github/sumneko/lua-language-server'
" local sumneko_binary = vim.fn.expand("$HOME")..'/github/sumneko/lua-language-server/bin/macOS/lua-language-server'

" require'lspconfig'.sumneko_lua.setup {
"   cmd = {sumneko_binary, "-E", sumneko_root_path .. "/main.lua"};
"   on_attach = on_attach,
" }
"
" let s:config_home = stdpath('config')
" source  expand("$HOME") + '/.config/nvim/pluginrc.d/lsp.vim
"

" lua require('treesitter')

" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Set completeopt to have a better completion experience
" set completeopt=menuone,noinsert,noselect

"
" let g:min_load = 1"
