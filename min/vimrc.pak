" let s:config_home = stdpath('config')
" source expand("$HOME") + /.config/nvim/pluginrc.d/lsp.vim
" 
" set ttymouse=xterm2
" --local nvim_lsp = require('lspconfig')
" --require('lsp_signature').on_attach()
" 
" -- require('lsp_config')  -- you may need my lsp_config.lua
" 
" -- local sumneko_root_path = vim.fn.expand("$HOME")..'/github/sumneko/lua-language-server'
" -- local sumneko_binary = vim.fn.expand("$HOME")..'/github/sumneko/lua-language-server/bin/macOS/lua-language-server'
" -- local on_attach = function(client, bufnr)
" -- require'lsp_signature'.on_attach()
" -- end
" 
" -- require'lspconfig'.sumneko_lua.setup {
" -- cmd = {sumneko_binary, "-E", sumneko_root_path .. "/main.lua"};
" -- on_attach = on_attach,
" -- }
" -- 

" 
" -- Only if your version of Neovim doesn't have https://github.com/neovim/neovim/pull/12632 merged
" -- vim._update_package_paths()
"  --"hrsh7th/nvim-compe",

" -- expand("$HOME")  + "/github/lsp_signature.nvim",
" -- "ray-x/lsp_signature.nvim",
" --  'ray-x/navigator.lua', requires = {'ray-x/guihua.lua', run = 'cd lua/fzy && make'}
" -- expand("$HOME")  + "/github/navigator.lua",requires = {'ray-x/guihua.lua', run = 'cd lua/fzy && make'},

set mouse=a

lua <<EOF
vim.cmd [[packadd packer.nvim]]
require('packer').startup(function()
use "wbthomason/packer.nvim"
use "neovim/nvim-lspconfig"
use {"ray-x/navigator.lua", requires = {'ray-x/guihua.lua', run = 'cd lua/fzy && make'}}

use {"hrsh7th/nvim-cmp",   
  requires = {
      {"hrsh7th/cmp-buffer", after = "nvim-cmp" },
      {"hrsh7th/cmp-nvim-lua", after = "nvim-cmp" },
      {"hrsh7th/cmp-vsnip", after = "nvim-cmp" },
      {"hrsh7th/cmp-calc", after = "nvim-cmp" },
      {"hrsh7th/cmp-path", after = "nvim-cmp" },
      {"hrsh7th/cmp-nvim-lsp", after = "nvim-cmp" },
      {"tzachar/cmp-tabnine", opt=true},
  },
  -- event = "InsertEnter",  -- THIS IS NOT WORKING
  config = function()
    local cmp = require'cmp'
    cmp.setup ({
      snippet = {
        expand = function(args)
          vim.fn['vsnip#anonymous'](args.body)
        end
      },
      completion = {
        autocomplete = { require("cmp.types").cmp.TriggerEvent.TextChanged },
        completeopt = "menu,menuone,noselect",
      },
      formatting = {
        format = function(entry, vim_item)
          print(vim.inspect(vim_item))
          if comp_kind == nil then comp_kind = require"navigator.lspclient.lspkind".comp_kind end
          vim_item.kind = comp_kind(vim_item.kind)
          return vim_item
        end
      },
      mapping = {
        ['<C-p>'] = cmp.mapping.select_prev_item(),
        ['<C-n>'] = cmp.mapping.select_next_item(),
        ['<C-d>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.close(),
        ['<CR>'] = cmp.mapping.confirm({behavior = cmp.ConfirmBehavior.Insert, select = true}),
      },
      sources = {{name = 'nvim_lsp'}, {name = 'buffer'}, {name = 'path'}, {name = 'calc'}, {name = 'vsnip'}, {name = 'nvim_lua'}}
  })
  end
 }
local lspconfig = require('lspconfig')
require('navigator').setup()
end)
EOF