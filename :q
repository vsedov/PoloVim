local conf = require("plugins.lsp.config")
local config = lambda.config.lsp.null_ls
require("lspconfig.ui.windows").default_options.border = lambda.style.border.type_0
require("lspconfig")
require("mason").setup({
    ui = {
        border = lambda.style.border.type_0,
        height = 0.8,
    },
})

require("mason-lspconfig").setup({
    automatic_installation = true,
    handlers = {
        function(name)
            local config = require("plugins.lsp.lsp.mason.lsp_servers")(name)

            if config then
                config.on_attach = function(client, bufnr)
                    require("navigator.lspclient.mapping").setup({ client = client, bufnr = bufnr }) -- setup navigator keymaps here,
                    require("navigator.dochighlight").documentHighlight(bufnr)
                end
                require("lspconfig")[name].setup(config)
            end
        end,
    },
})
-- Default keymaps
-- mode 	key 	function
-- n 	gr 	async references, definitions and context
-- n 	<Leader>gr 	show reference and context
-- i 	<m-k> 	signature help
-- n 	<c-k> 	signature help
-- n 	<C-]> 	go to definition (if multiple show listview)
-- n 	gp 	definition preview (show Preview)
-- n 	gP 	type definition preview (show Preview)
-- n 	<C-LeftMouse> 	definition
-- n 	g<LeftMouse> 	implementation
-- n 	<Leader>gt 	treesitter document symbol
-- n 	<Leader>gT 	treesitter symbol for all open buffers
-- n 	<Leader> ct 	ctags symbol search
-- n 	<Leader> cg 	ctags symbol generate
-- n 	K 	hover doc
-- n 	<Space>ca 	code action (when you see üèè )
-- n 	<Space>la 	code lens action (when you see a codelens indicator)
-- v 	<Space>ca 	range code action (when you see üèè )
-- n 	<Space>rn 	rename with floating window
-- n 	<Leader>re 	rename (lsp default)
-- n 	<Leader>gi 	hierarchy incoming calls
-- n 	<Leader>go 	hierarchy outgoing calls
-- n 	<Space>ff 	format buffer (LSP)
-- v 	<Space>ff 	format selection range (LSP)
-- n 	gi 	implementation
-- n 	<Space> D 	type definition
-- n 	gL 	show line diagnostic
-- n 	gG 	show diagnostic for all buffers
-- n 	]d 	next diagnostic error or fallback
-- n 	[d 	previous diagnostic error or fallback
-- n 	<Leader> dt 	diagnostic toggle(enable/disable)
-- n 	]r 	next treesitter reference/usage
-- n 	[r 	previous treesitter reference/usage
-- n 	<Space> wa 	add workspace folder
-- n 	<Space> wr 	remove workspace folder
-- n 	<Space> wl 	print workspace folder
-- n 	<Leader>k 	toggle reference highlight
-- i/n 	<C-p> 	previous item in list
-- i/n 	<C-n> 	next item in list
-- i/n 	number 1~9 	move to ith row/item in the list
-- i/n 	<Up> 	previous item in list
-- i/n 	<Down> 	next item in list
-- n 	<Ctrl-w>j 	move cursor to preview (windows move to bottom view point)
-- n 	<Ctrl-w>k 	move cursor to list (windows move to up view point)
-- i/n 	<C-o> 	open preview file in nvim/Apply action
-- n 	<C-v> 	open preview file in nvim with vsplit
-- n 	<C-s> 	open preview file in nvim with split
-- n 	<Enter> 	open preview file in nvim/Apply action
-- n 	<ESC> 	close listview of floating window

-- i/n 	<C-e> 	close listview of floating window
-- n 	<C-q> 	close listview and send results to quickfix
-- i/n 	<C-b> 	previous page in listview
-- i/n 	<C-f> 	next page in listview
-- i/n 	<C-s> 	save the modification to preview window to file
local util = require("navigator.util")
local log = util.log
local trace = util.trace
local api = vim.api

if vim.lsp.buf.format == nil then
    vim.lsp.buf.format = vim.lsp.buf.formatting
end

if vim.diagnostic == nil then
    util.error("Please update nvim to 0.6.1+")
end

local function fallback_keymap(key)
    -- when handler failed fallback to key
    vim.schedule(function()
        print("fallback to key", key)
        vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true), "n", true)
    end)
end

local function fallback_fn(key)
    return function()
        fallback_keymap(key)
    end
end

local double = { "‚ïî", "‚ïê", "‚ïó", "‚ïë", "‚ïù", "‚ïê", "‚ïö", "‚ïë" }
local single = { "‚ï≠", "‚îÄ", "‚ïÆ", "‚îÇ", "‚ïØ", "‚îÄ", "‚ï∞", "‚îÇ" }
local remap = util.binding_remap
local key_maps = {
    {
        key = "gr",
        func = require("navigator.reference").async_ref,
        desc = "async_ref",
    },
    { key = "gR", func = require("navigator.reference").reference, desc = "reference" }, -- reference deprecated
    {
        key = "<M-k>",
        func = vim.lsp.buf.signature_help,
        desc = "signature_help",
        mode = "i",
    },
    {
        key = "<c-k>",
        func = vim.lsp.buf.signature_help,
        desc = "signature_help",
    },
    {
        key = "<Leader>g0",
        func = require("navigator.symbols").document_symbols,
        desc = "document_symbols",
    },
    {
        key = "gW",
        func = require("navigator.workspace").workspace_symbol_live,
        desc = "workspace_symbol_live",
    },
    {
        key = "<c-]>",
        func = require("navigator.definition").definition,
        desc = "definition",
    },
    {
        key = "gd",
        func = remap(require("navigator.definition").definition, "gd"),
        desc = "definition",
    },
    -- { key = 'gD',            func = vim.lsp.buf.declaration,                                              desc = 'declaration',                                     fallback = fallback_fn('gD') }, -- fallback used
    -- for lsp handler
    {
        key = "gp",
        func = remap(require("navigator.definition").definition_preview, "gp"),
        desc = "definition_preview",
    }, -- paste
    {
        key = "gP",
        func = remap(require("navigator.definition").type_definition_preview, "gP"),
        desc = "type_definition_preview",
    }, -- paste
    {
        key = "<Leader>gt",
        func = require("navigator.treesitter").buf_ts,
        desc = "buf_ts",
    },
    {
        key = "<Leader>gT",
        func = require("navigator.treesitter").bufs_ts,
        desc = "bufs_ts",
    },
    -- { key = '<Leader>ct',    func = require('navigator.ctags').ctags,                                     desc = 'ctags' },
    -- { key = '<Space>ca',     func = require('navigator.codeAction').code_action, desc = 'code_action',    mode = {'n', 'v'} },
    -- { key = '<Leader>re', func = 'rename()' },
    {
        key = "<Space>rn",
        func = require("navigator.rename").rename,
        desc = "rename",
    },
    {
        key = "<Leader>gi",
        func = vim.lsp.buf.incoming_calls,
        desc = "incoming_calls",
    },
    {
        key = "<Leader>go",
        func = vim.lsp.buf.outgoing_calls,
        desc = "outgoing_calls",
    },
    {
        key = "gi",
        func = vim.lsp.buf.implementation,
        desc = "implementation",
        fallback = fallback_fn("gi"),
    }, -- insert
    {
        key = "<Space>D",
        func = vim.lsp.buf.type_definition,
        desc = "type_definition",
    },
    {
        key = "D",
        func = require("navigator.diagnostics").show_diagnostics,
        desc = "show_diagnostics",
    },
    {
        key = "gG",
        func = require("navigator.diagnostics").show_buf_diagnostics,
        desc = "show_buf_diagnostics",
    },
    -- { key = '<Leader>dt',    func = require('navigator.diagnostics').toggle_diagnostics,                  desc = 'toggle_diagnostics' },
    {
        key = "]d",
        func = require("navigator.diagnostics").goto_next,
        desc = "next diagnostics error or fallback",
    },
    {
        key = "[d",
        func = require("navigator.diagnostics").goto_prev,
        desc = "prev diagnostics error or fallback",
    },
    {
        key = "]O",
        func = vim.diagnostic.set_loclist,
        desc = "diagnostics set loclist",
    },
    {
        key = "]r",
        func = require("navigator.treesitter").goto_next_usage,
        desc = "goto_next_usage",
    },
    {
        key = "[r",
        func = require("navigator.treesitter").goto_previous_usage,
        desc = "goto_previous_usage",
    },
    {
        key = "<C-LeftMouse>",
        func = vim.lsp.buf.definition,
        desc = "definition",
        fallback = fallback_fn("<C-LeftMouse>"),
    },
    {
        key = "g<LeftMouse>",
        func = vim.lsp.buf.implementation,
        desc = "implementation",
    },
    -- { key = '<Leader>k',     func = require('navigator.dochighlight').hi_symbol,                          desc = 'hi_symbol' },
    {
        key = "<Space>wa",
        func = require("navigator.workspace").add_workspace_folder,
        desc = "add_workspace_folder",
    },
    {
        key = "<Space>wr",
        func = require("navigator.workspace").remove_workspace_folder,
        desc = "remove_workspace_folder",
    },
    {
        key = ";ff",
        func = vim.lsp.buf.format,
        desc = "format",
        mode = { "n", "v", "x" },
    },
    {
        key = "<Space>gm",
        func = require("navigator.formatting").range_format,
        mode = "n",
        desc = "range format operator e.g gmip",
    },
    {
        key = "<Space>wl",
        func = require("navigator.workspace").list_workspace_folders,
        desc = "list_workspace_folders",
    },
    -- { key = '<Space>la',     func = require('navigator.codelens').run_action, desc = 'run code lens action', mode = 'n'}
    -- stylua: ignore end
}

require("navigator").setup({
    mason = true,
    default_mapping = false, -- set to false if you will remap every key
    -- please check mapping.lua for all keymaps
    debug = true,
    keymaps = keymaps,
    -- keymaps = {
    --     { key = "gD", func = "declaration()" },
    --     { key = "gd", func = "definition()" },
    --     { key = "", func = "hover()" },
    --     { key = "gi", func = "implementation()" },
    --     { key = "<C-k>", func = "signature_help()" },
    --     { key = "<space>wa", func = "add_workspace_folder()" },
    --     { key = "<space>wr", func = "remove_workspace_folder()" },
    --     { key = "gr", func = "references()" },
    --     { key = "[d", func = "goto_prev()" },
    --     { key = "]d", func = "goto_next()" },
    --     { key = ";ff", func = "format_buffer()" },
    --     { key = ";ff", func = "format_selection_range()" },
    -- },

    treesitter_analysis = true, -- treesitter variable context
    treesitter_navigation = true, -- bool|table false: use lsp to navigate between symbol ']r/[r', table: a list of
    --lang using TS navigation
    treesitter_analysis_max_num = 100, -- how many items to run treesitter analysis
    treesitter_analysis_condense = true, -- condense form for treesitter analysis
    -- this value prevent slow in large projects, e.g. found 100000 reference in a project
    transparency = 50, -- 0 ~ 100 blur the main window, 100: fully transparent, 0: opaque,  set to nil or 100 to disable it

    lsp_signature_help = true, -- if you would like to hook ray-x/lsp_signature plugin in navigator
    -- setup here. if it is nil, navigator will not init signature help
    signature_help_cfg = nil, -- if you would like to init ray-x/lsp_signature plugin in navigator, and pass in your own config to signature help
    icons = { -- refer to lua/navigator.lua for more icons config
        -- requires nerd fonts or nvim-web-devicons
        icons = false,
        -- Code action
        code_action_icon = "üèè", -- note: need terminal support, for those not support unicode, might crash
        -- Diagnostics
        diagnostic_head = "üêõ",
        diagnostic_head_severity_1 = "üà≤",
        fold = {
            prefix = "‚ö°", -- icon to show before the folding need to be 2 spaces in display width
            separator = "Ôëõ", -- e.g. shows ÔëõÔëõÔëõÔëõ  3 lines ÔëõÔëõÔëõÔëõ
        },
    },
    mason = true, -- set to true if you would like use the lsp installed by williamboman/mason
    lsp = {
        enable = true, -- skip lsp setup, and only use treesitter in navigator.
        disable_lsp = { "ruff", "ruff_lsp", "sourcery" },
        -- Use this if you are not using LSP servers, and only want to enable treesitter support.
        -- If you only want to prevent navigator from touching your LSP server configs,
        -- use `disable_lsp = "all"` instead.
        -- If disabled, make sure add require('navigator.lspclient.mapping').setup({bufnr=bufnr, client=client}) in your
        -- own on_attach
        code_action = { enable = false },
        code_lens_action = { enable = true, sign = true, sign_priority = 40, virtual_text = true },
        document_highlight = true, -- LSP reference highlight,
        -- it might already supported by you setup, e.g. LunarVim
        format_on_save = false, -- {true|false} set to false to disasble lsp code format on save (if you are using prettier/efm/formater etc)
        -- table: {enable = {'lua', 'go'}, disable = {'javascript', 'typescript'}} to enable/disable specific language
        -- enable: a whitelist of language that will be formatted on save
        -- disable: a blacklist of language that will not be formatted on save
        -- function: function(bufnr) return true end to enable/disable lsp format on save
        format_options = { async = false }, -- async: disable by default, the option used in vim.lsp.buf.format({async={true|false}, name = 'xxx'})
        disable_format_cap = { "sqlls", "lua_ls", "gopls" }, -- a list of lsp disable format capacity (e.g. if you using efm or vim-codeformat etc), empty {} by default
        diagnostic = {
            underline = true,
            virtual_text = false, -- show virtual for diagnostic message
            update_in_insert = false, -- update diagnostic message in insert mode
            float = { -- setup for floating windows style
                focusable = false,
                sytle = "minimal",
                border = "rounded",
                source = "always",
                header = "",
                prefix = "ÔÜà",
            },
        },

        diagnostic_scrollbar_sign = { "‚ñÉ", "‚ñÜ", "‚ñà" }, -- experimental:  diagnostic status in scroll bar area; set to false to disable the diagnostic sign,
        --                for other style, set to {'‚ïç', 'ÔÆÜ'} or {'-', '='}
        diagnostic_virtual_text = false, -- show virtual for diagnostic message
        diagnostic_update_in_insert = false, -- update diagnostic message in insert mode
        display_diagnostic_qf = false, -- always show quickfix if there are diagnostic errors, set to false if you want to ignore it
    },
})
local cfg = {
    bind = true,
    doc_lines = 10,
    floating_window = lambda.config.lsp.lsp_sig.use_floating_window, -- show hint in a floating window, set to false for virtual text only mode ]]
    floating_window_above_cur_line = lambda.config.lsp.lsp_sig.use_floating_window_above_cur_line,
    hint_enable = true, -- virtual hint enable
    fix_pos = lambda.config.lsp.lsp_sig.fix_pos, -- set to true, the floating window will not auto-close until finish all parameters
    hint_prefix = "üêº ", -- Panda for parameter
    auto_close_after = 15, -- close after 15 seconds
    cursorhold_update = false,
    handler_opts = {
        border = "single",
    },
    zindex = 1002,
    timer_interval = 100,
    log_path = vim.fn.expand("$HOME") .. "/tmp/sig.log",
    padding = " ", -- character to pad on left and right of signature can be ' ', or '|'  etc
    toggle_key = [[<M-x>]], -- toggle signature on and off in insert mode,  e.g. '<M-x>'
    select_signature_key = [[<M-c>]], -- toggle signature on and off in insert mode,  e.g. '<M-x>'
}

require("lsp_signature").setup(cfg)
